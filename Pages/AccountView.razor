@page "/accountview"

@using Sesh.Data
@using SeshDB.Data.Sesh

@inject AuthenticationStateProvider AuthenticationStateProvider
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
*@

@inherits OwningComponentBase<TransactionService>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (accounts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>CurrentBalance</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var account in accounts)
            {
                <tr>
                    <td>@account.AccountName</td>
                    <td>@account.CurrentBalance</td>
                </tr>
            }
        </tbody>
    </table>

    <p><button class="btn btn-primary" @onclick="AddNewAccount">Add New Account</button></p>

    @if (ShowPopup)

    {
        <!-- This is the popup to create or edit a forecast -->
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Edit Forecast</h3>
                        <!-- Button to close the popup -->
                        <button type="button" class="close"
                                @onclick="ClosePopup">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <!-- Edit form for the current forecast -->
                    <div class="modal-body">
                        <input type="text" placeholder="Account Nickname" id="AccountName" />
                        <label for="AccountName">Account Name</label>
                        <input type="text" placeholder="Starting Balance" id="StartingBalance"/>
                        <label for="StartingBalance">Starting Balance</label>
                        <br />
                        <!-- Button to save the forecast -->
                        <button class="btn btn-primary"
                                @onclick="SaveAccount">
                            Save
                        </button>
                        <!-- Only show delete button if not a new record -->
                        @if (objAccount.AccountId > 0)
                        {
                            <!-- Button to delete the Account-->
                            <button class="btn btn-primary" @onclick="DeleteAccount">Delete</button>
                        }
                    </div>
                </div>
            </div>
        </div>

    }
}

@code {
    //AuthenticationState is available as a CascadingParameter

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    List<Accounts> accounts;
    Dictionary<int, string> accountDict;

    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        var user = (await authenticationStateTask).User;
        // Get the accounts for the current user
        // We access AccountService using @Service
        accounts = await @Service.GetAccountsAsync(user.Identity.Name);
        accountDict = await @Service.GetAccountKeyValuesAsync(user.Identity.Name);
    }
   
    Accounts objAccount = new Accounts();
    bool ShowPopup = false;
    void ClosePopup()
    {
        ShowPopup = false;
    }
    void AddNewAccount()
    {
        objAccount = new Accounts();
        // Set Id to 0 so we know it is a new record
        objAccount.AccountId = 0;
        ShowPopup = true;
    }
    async Task SaveAccount()
    {
        ShowPopup = false;
        var user = (await authenticationStateTask).User;

        if (objAccount.AccountId == 0)
        {
            //create new Account
            Accounts objNewAccount = new Accounts();
            objNewAccount.AccountId = objAccount.AccountId;


            var result = @Service.CreateAccountAsync(objNewAccount);
        }
        else
        {
            var result = @Service.UpdateAccountAsync(objAccount);
        }
        accounts = await @Service.GetAccountsAsync(user.Identity.Name);
    }
    

    void EditAccount(Accounts Account)
    {
        // set the selected forecast as the current forecast
        objAccount = Account;
        ShowPopup = true;
    }

    async Task DeleteAccount()
    {
        //Close the popup
        ShowPopup = false;
        // Get the current user
        var user = (await authenticationStateTask).User;
        // Delete the Account
        var result = @Service.DeleteAccountAsync(objAccount);
        // Refresh Accounts
        await @Service.GetAccountsAsync(user.Identity.Name);
    }
}
