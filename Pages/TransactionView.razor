@page "/transactionview"

@using Sesh.Data
@using SeshDB.Data.Sesh

@inject AuthenticationStateProvider AuthenticationStateProvider
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
*@

@inherits OwningComponentBase<TransactionService>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (transactions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>                
                <th>Account</th>
                <th>Transaction Date</th>
                <th>Payee</th>
                <th>Item</th>
                <th>Memo</th>
                <th>Debit Amount</th>
                <th>Credit Amount</th>  
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in transactions)
            {
                <tr>                    
                    <td><input type="text" placeholder="@accountDict.GetValueOrDefault(transaction.AccountId)"  /></td>
                    <td>@transaction.TransactionDate.ToShortDateString()</td>
                    <td>@payeeDict.GetValueOrDefault(transaction.PayeeId)</td>
                    <td>@catDict.GetValueOrDefault(transaction.ItemId)</td>
                    <td>@transaction.Memo</td>
                    <td>@transaction.DebitAmount</td>
                    <td><input placeholder="@transaction.CreditAmount" type="text" /></td>
                    <td>
                        <button class="btn btn-primary">Edit</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<Modal ComponentDataUpdated="ComponentUpdated"></Modal>

@code {

    

    //AuthenticationState is available as a CascadingParameter
    [CascadingParameter]
    Transactions objTransaction { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    List<Transactions> transactions;
    Dictionary<int, string> accountDict;
    Dictionary<int, string> payeeDict;
    Dictionary<int, string> catDict;

    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        var user = (await authenticationStateTask).User;
        // Get the Transactions for the current user
        transactions = await @Service.GetTransactionsAsync(user.Identity.Name);
        // Get a Dictionary of User Accounts
        accountDict = await @Service.GetAccountKeyValuesAsync(user.Identity.Name);
        // Get a Dictionary of Payees
        payeeDict = await @Service.GetPayeeKeyValuesAsync(user.Identity.Name);
        // Get a Dictionary of Categories
        catDict = await @Service.GetCatKeyValuesAsync(user.Identity.Name);
    }

    async Task ComponentUpdated(string args)
    {
        var user = (await authenticationStateTask).User;
        transactions = await @Service.GetTransactionsAsync(user.Identity.Name);
        StateHasChanged();
    }

    void EditForecast(Transactions transaction)
    {
        //
    }

}
